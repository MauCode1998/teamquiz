"""passlib.utils.scrypt._gen_files - meta script that generates _salsa.py"""
import os

_SALSA_OPS = [

        (  4,  0, 12,  7),
        (  8,  4,  0,  9),
        ( 12,  8,  4, 13),
        (  0, 12,  8, 18),

        (  9,  5,  1,  7),
        ( 13,  9,  5,  9),
        (  1, 13,  9, 13),
        (  5,  1, 13, 18),

        ( 14, 10,  6,  7),
        (  2, 14, 10,  9),
        (  6,  2, 14, 13),
        ( 10,  6,  2, 18),

        (  3, 15, 11,  7),
        (  7,  3, 15,  9),
        ( 11,  7,  3, 13),
        ( 15, 11,  7, 18),

        (  1,  0,  3,  7),
        (  2,  1,  0,  9),
        (  3,  2,  1, 13),
        (  0,  3,  2, 18),

        (  6,  5,  4,  7),
        (  7,  6,  5,  9),
        (  4,  7,  6, 13),
        (  5,  4,  7, 18),

        ( 11, 10,  9,  7),
        (  8, 11, 10,  9),
        (  9,  8, 11, 13),
        ( 10,  9,  8, 18),

        ( 12, 15, 14,  7),
        ( 13, 12, 15,  9),
        ( 14, 13, 12, 13),
        ( 15, 14, 13, 18),
]

def main():
    target = os.path.join(os.path.dirname(__file__), "_salsa.py")
    fh = file(target, "w")
    write = fh.write

    VNAMES = ["v%d" % i for i in range(16)]

    PAD = " " * 4
    PAD2 = " " * 8
    PAD3 = " " * 12
    TLIST = ", ".join("b%d" % i for i in range(16))
    VLIST = ", ".join(VNAMES)
    kwds = dict(
        VLIST=VLIST,
        TLIST=TLIST,
    )

    write('''\
"""passlib.utils.scrypt._salsa - salsa 20/8 core, autogenerated by _gen_salsa.py"""

def salsa20(input):
    \"""apply the salsa20/8 core to the provided input

    :args input: input list containing 16 32-bit integers
    :returns: result list containing 16 32-bit integers
    \"""

    %(TLIST)s = input
    %(VLIST)s = \\
        %(TLIST)s

    i = 0
    while i < 4:
''' % kwds)

    for idx, (target, source1, source2, rotate) in enumerate(_SALSA_OPS):
        write('''\
        t = (%(src1)s + %(src2)s) & 0xffffffff
        %(dst)s ^= ((t & 0x%(rmask)08x) << %(rot1)d) | (t >> %(rot2)d)

''' % dict(
        idx=idx, is1 = source1, is2=source2, it=target,
        src1=VNAMES[source1],
        src2=VNAMES[source2],
        dst=VNAMES[target],
        rmask=(1<<(32-rotate))-1,
        rot1=rotate,
        rot2=32-rotate,
    ))

    write('''\
        i += 1

''')

    for idx in range(16):
        write(PAD + "b%d = (b%d + v%d) & 0xffffffff\n" % (idx,idx,idx))

    write('''\

    return %(TLIST)s

''' % kwds)
        
if __name__ == "__main__":
    main()

